// *****************************************************************************
// ******************************** Sorting ************************************
// *****************************************************************************

void sorts::selection_sort::sort(vector<int>& a, bool increasing) const {
  // If a is empty, return. Otherwise, 0 - 1 is converted to an unsigned
  // value in the for loop condition, which leads to segfault.
  if (a.size() <= 1) return;
  for (int i = 0; i < a.size() - 1; ++i) {
    int imin = i;
    for (int j = i + 1; j < a.size(); ++j) {
      if (increasing ? a[j] < a[imin] : a[j] > a[imin]) {
        imin = j;
      }
    }
    swap(a[imin], a[i]);
  }
}

void sorts::insertion_sort::sort(vector<int>& a, bool increasing) const {
  for (int i = 1; i < a.size(); ++i) {
    int j = i;
    int v = a[i];
    while (j > 0 && (increasing ? a[j - 1] > v : a[j - 1] < v)) {
      a[j] = a[j - 1];
      --j;
    }
    a[j] = v;
  }
}

void sorts::quick_sort::sort(vector<int>& a, bool increasing) const {
  auto partition = [&a, increasing](int b, int e) {
    // Choose a random pivot in the array.
    std::default_random_engine generator;
    std::uniform_int_distribution<int> distribution(b, e);
    int ipivot = distribution(generator);
    swap(a[e], a[ipivot]);

    // Start the algorithm.
    int ip = b;
    int vp = a[e];
    for (int i = b; i <= e; ++i) {
      if (increasing ? a[i] <= vp : a[i] >= vp) {
        swap(a[i], a[ip++]);
      }
    }
    return ip - 1;
  };
  function<void(int, int)> local = [&partition, &a, &local](int b, int e) {
    if (b < e) {
      int p = partition(b, e);
      local(b, p - 1);
      local(p + 1, e);
    }
  };
  local(0, a.size() - 1);
}

void sorts::heap_sort::sort(vector<int>& a, bool increasing) const {
  // If a is empty, return. Otherwise, 0 - 1 is converted to an unsigned
  // value in the for loop condition, which leads to segfault.
  if (a.size() <= 1) return;
  auto cmp = [increasing](int l, int r) {
    return increasing ? l < r : r < l;
  };
  auto it = a.end();
  make_heap(a.begin(), it, cmp);
  for (int i = 0; i < a.size() - 1; ++i) {
    // Swaps top of the heap with end of the range.
    pop_heap(a.begin(), it--, cmp);
  }
}

vector<int> sorts::counting_sort::sort(
    const vector<int>& a, bool increasing) const {
  // If a is empty, return. Otherwise, there is no min/max element in the array.
  if (a.size() <= 1) return a;
  vector<int> c(1 + *max_element(a.begin(), a.end()));
  vector<int> s(a.size());
  for (int i = 0; i < a.size(); ++i) {
    ++c[a[i]];
  }
  if (increasing) for (int i = 1; i < c.size(); ++i) c[i] += c[i - 1];
  else for (int i = c.size() - 1; i >= 1; --i) c[i - 1] += c[i];
  // Traverse in reverse order. Otherwise, sort will not be stable.
  for (int i = a.size() - 1; i >= 0; --i) {
    s[c[a[i]] - 1] = a[i];
    --c[a[i]];
  }
  return s;
}

vector<int> sorts::radix_sort::sort(
    const vector<int>& a, bool increasing) const {
  // If a is empty, return. Otherwise, there is no min/max element in the array.
  if (a.size() <= 1) return a;
  auto stable = [increasing](vector<int>& a, int digit) {
    // No need to check the size here since the check is done before.
    auto dig = [&digit](int nb) {
      return nb % (int)pow(10, digit) / (int)pow(10, digit - 1);
    };
    vector<int> c(10);
    vector<int> s(a.size());
    for (int i = 0; i < a.size(); ++i) {
      ++c[dig(a[i])];
    }
    if (increasing) {
      for (int i = 1; i < c.size(); ++i) {
        c[i] += c[i - 1];
      }
    } else {
      for (int i = c.size() - 1; i >= 1; --i) {
        c[i - 1] += c[i];
      }
    }
    // Traverse in reverse order. Otherwise, sort will not be stable.
    for (int i = a.size() - 1; i >= 0; --i) {
      s[c[dig(a[i])] - 1] = a[i];
      --c[dig(a[i])];
    }
    return s;
  };
  int nb_dig = 1 + log10(*max_element(a.begin(), a.end()));
  auto s = a;
  for (int i = 1; i <= nb_dig; ++i) {
    s = stable(s, i);
  }
  return s;
}

vector<int> sorts::merge_sort::sort(
    const vector<int>& a, bool increasing) const {
  // If a is empty, return. Otherwise, the base case fails.
  if (a.size() <= 1) return a;
  auto lmerge = [increasing](const vector<int>& l, const vector<int>& r) {
    int il = 0, ir = 0;
    vector<int> m(l.size() + r.size());
    for (int i = 0; i < l.size() + r.size(); ++i) {
      if (il == l.size() || (ir < r.size() && (increasing
                                                   ? l[il] > r[ir]
                                                   : l[il] < r[ir]))) {
        m[i] = r[ir++];
      } else {
        m[i] = l[il++];
      }
    }
    return m;
  };
  function<vector<int>(int, int)> local = [&a, &lmerge, &local](int b, int e) {
    if (b == e) {
      return vector<int>({a[b]});
    } else {
      int m = b + (e - b) / 2;  // Avoids integer overflow.
      auto l = local(b, m);
      auto r = local(m + 1, e);
      return lmerge(l, r);
    }
  };
  return local(0, a.size() - 1);
}


// *****************************************************************************
// ***************************** Data Structures *******************************
// *****************************************************************************

// Priority Queue.
int datastructures::pqueue::left(int node) const {
  return 2*node + 1;
}

int datastructures::pqueue::right(int node) const {
  return 2*node + 2;
}

int datastructures::pqueue::parent(int node) const {
  return (node - 1) / 2;
}

void datastructures::pqueue::heapify(int node, int size) {
  int extreme = node;
  if (left(node) < size && (maxqueue ? a[left(node)] > a[extreme]
                                     : a[left(node)] < a[extreme])) {
    extreme = left(node);
  }
  if (right(node) < size && (maxqueue ? a[right(node)] > a[extreme]
                                      : a[right(node)] < a[extreme])) {
    extreme = right(node);
  }
  if (extreme != node) {
    swap(a[extreme], a[node]);
    heapify(extreme, size);
  }
}

void datastructures::pqueue::build() {
  for (int i = a.size() / 2 - 1; i >= 0; --i) {
    heapify(i, a.size());
  }
}

void datastructures::pqueue::insert(int key) {
  if (a.empty()) {
    a.push_back(key);
  } else {
    if (maxqueue) {
      a.push_back(std::numeric_limits<int>::min());
      increase_key(a.size() - 1, key);
    } else {
      a.push_back(std::numeric_limits<int>::max());
      decrease_key(a.size() - 1, key);
    }
  }
}

int datastructures::pqueue::extract() {
  int ans = a[0];
  a[0] = a.back();
  a.pop_back();
  heapify(0, a.size());
  return ans;
}

void datastructures::pqueue::increase_key(int node, int new_key) {
  a[node] = new_key;
  if (maxqueue) {
    while (node > 0 && a[node] > a[parent(node)]) {
      swap(a[node], a[parent(node)]);
      node = parent(node);
    }
  } else {
    heapify(node, a.size());
  }
}

void datastructures::pqueue::decrease_key(int node, int new_key) {
  a[node] = new_key;
  if (!maxqueue) {
    while (node > 0 && a[node] < a[parent(node)]) {
      swap(a[node], a[parent(node)]);
      node = parent(node);
    }
  } else {
    heapify(node, a.size());
  }
}

// Binary Search Tree.
datastructures::bst::node* datastructures::bst::search(int key) const {
  node* n = root;
  while (n != nullptr && n->key != key) {
    if (key <= n->key) n = n->left;
    else n = n->right;
  }
  return n;
}

datastructures::bst::node* datastructures::bst::vmin(node* start) const {
  while (start->left != nullptr) start = start->left;
  return start;
}

datastructures::bst::node* datastructures::bst::vmax(node* start) const {
  while (start->right != nullptr) start = start->right;
  return start;
}

datastructures::bst::node* datastructures::bst::successor(node* start) const {
  if (start->right != nullptr) return vmin(start->right);
  node* p = start->parent;
  while (p != nullptr && p->right == start) {
    start = p;
    p = p->parent;
  }
  return p;
}

datastructures::bst::node*
datastructures::bst::predecessor(node* start) const {
  if (start->left != nullptr) return vmax(start->left);
  node* p = start->parent;
  while (p != nullptr && p->left == start) {
    start = p;
    p = p->parent;
  }
  return p;
}

datastructures::bst::node* datastructures::bst::insert(int key) {
  node* n = new node(key);
  if (root == nullptr) return root = n;

  node* p = nullptr;
  node* c = root;
  while (c != nullptr) {
    p = c;
    c = key <= c->key ? c->left : c->right;
  }
  n->parent = p;
  if (key <= p->key) p->left = n;
  else p->right = n;
  return n;
}

void datastructures::bst::del(node* start) {
  auto transplant = [this](node* n, node* v) {
    if (n == root) {
      root = v;
    } else if (n == n->parent->right) {
      n->parent->right = v;
    } else {
      n->parent->left = v;
    }
    if (v != nullptr) {
      v->parent = n->parent;
    }
  };
  if (start->left == nullptr) {
    transplant(start, start->right);
  } else if (start->right == nullptr) {
    transplant(start, start->left);
  } else {
    // Replace with a node in the left because left <= key < right.
    // If using left < key <= right, then look for successor, in the right tree.
    node* pred = vmax(start->left);
    if (start->left != pred) {
      transplant(pred, pred->left);
      pred->left = start->left;
      start->left->parent = pred;
    }
    transplant(start, pred);
    pred->right = start->right;
    start->right->parent = pred;
  }
  delete start;
}

void datastructures::bst::walk(node* start, vector<int>& sorted) const {
  if (start != nullptr) {
    walk(start->left, sorted);
    sorted.push_back(start->key);
    walk(start->right, sorted);
  }
}


// Linked List.
void datastructures::ll_cycle(node* start, int* mu, int* lambda) {
  *lambda = 0;
  if (start == nullptr || start->next == nullptr ||
      start->next->next == nullptr) return;

  // Detect a cycle.
  node* tortoise = start->next;
  node* hare = start->next->next;
  while (tortoise != hare) {
    if (hare->next == nullptr) return;
    tortoise = tortoise->next;
    hare = hare->next->next;
  }

  // Cycle start.
  tortoise = start;
  *mu = 0;
  while (tortoise != hare) {
    ++(*mu);
    tortoise = tortoise->next;
    hare = hare->next;
  }

  // Cycle length.
  *lambda = 1;
  tortoise = hare->next;
  while (tortoise != hare) {
    ++(*lambda);
    tortoise = tortoise->next;
  }
}


// *****************************************************************************
// *********************************** Math ************************************
// *****************************************************************************

int math::gcd(int a, int b) {
  while (b != 0) {
    int c = a;
    a = b;
    b = c % b;
  }
  return a;
}

int math::selection(vector<int>& a, int i) {
  auto partition = [&a](int b, int e) {
    int ip = b;
    int vp = a[e];
    for (int i = b; i <= e; ++i) {
      if (a[i] <= vp) {
        swap(a[i], a[ip++]);
      }
    }
    return ip - 1;
  };
  function<int(int, int, int)> local =
      [&partition, &a, &local](int b, int e, int i) {
    if (b == e) return a[b];
    int q = partition(b, e);
    int k = q - b + 1;
    if (k == i) {
      return a[q];
    } else if (i < k) {
      return local(b, q - 1, i);
    } else {
      return local(q + 1, e, i - k);
    }
  };
  return local(0, a.size() - 1, i);
}

set<string> math::subsets(const string& letters) {
  set<string> s;
  for (int i = 0; i < (1 << letters.size()); ++i) {
    int v = i;
    int j = 0;
    string word;
    while(v > 0) {
      if (v & 1) word.push_back(letters[j]);
      ++j;
      v >>= 1;
    }
    s.insert(word);
  }
  return s;
}

// Permutations - Iterative STL algorithm.
set<string> math::permutations(const string& letters) {
  set<string> perms;
  if (letters.size() <= 1) {
    perms.insert(letters);
    return perms;
  }

  // Computes the next permutation and returns false if new cycle.
  auto next_p = [](string& s) {
    int i = s.size() - 2;
    while (i >= 0) {
      // We're trying to get the next permutation in lexicographic order.
      // As long as the characters are in decreasing order, we can't do much,
      // so skip those, and stop when finally it's in increasing order.
      if (s[i] < s[i+1]) {
        // We found a substring that can be changed to get the next permutation.
        int j = s.size() - 1;
        // We want the smallest bigger permutation, so find the smallest
        // character in the substring that's bigger than the leading character
        // and swap these two.
        while (s[i] >= s[j]) j--;
        swap(s[i], s[j]);
        // Now since we want the smallest next permutation. Note that swapping
        // above left the substring sorted in decreasing order. To get the
        // smallest substring now that the leading character is fixed, reverse
        // the rest of the substring so that it's in increasing order, and
        // therefore the smallest value.
        ++i;
        j = s.size() - 1;
        while (i < j) swap(s[i++], s[j--]);
        // Return true since there was a valid next permutation.
        return true;
      }
      --i;
    }
    // Here the whole string is sorted in decreasing order. There is no next
    // permutation except starting another cycle. Sort in increasing order by
    // reversing the string and return false.
    i = 0;
    int j = s.size() - 1;
    while (i < j) swap(s[i++], s[j--]);
    return false;
  };

  auto work = letters;
  while (perms.insert(work), cout << work << endl, next_p(work)) ;
  return perms;
}

// Permutations - Recursive.
set<string> math::permutations(const string& letters) {
  set<string> ans;
  function<void(const string&, const string&)> local =
      [&local, &ans](const string& prefix, const string& rem) {
    if (rem.size() == 0) {
      ans.insert(prefix);
    } else {
      for (int i = 0; i < rem.size(); ++i) {
        string without = rem;
        without.erase(i, 1);
        local(prefix + rem[i], without);
      }
    }
  };
  local("", letters);
  return ans;
}

bool math::is_prime(long long int nb) {
  auto modexp = [](long long int a, long long int b, long long int n) {
    long long int d = 1;
    int nb_dig = 1 + (int)log2(b);
    for (int i = nb_dig; i >= 1; --i) {
      d = (d*d) % n;
      if (b & (1LL << (i-1))) {   // be sure to use a long long bitmask
        d = (d*a) % n;
      }
    }
    return d;
  };
  return modexp(2, nb - 1, nb) % nb == 1;
}

// The algorithm uses a table called a failure table. For each index i of the
// pattern, entry i of the table contains the length of the longest proper
// prefix of the substring [0; i] that:
//   * is not [0; i] (what makes it 'proper')
//   * is also a suffix of [0; i]
// Using this table, when there is either a match or a detection of failure, the
// algorithm can skip checking the beginning of the pattern for the next try:
// say a substring S of the pattern matched so far, and the next character of
// the text does not match. Using the table, we know that the last N characters
// of S are identical to the first N characters of S (which are the first N
// characters of the pattern, too). Since we know those N characters matched,
// that means that for sure the first N characters of the pattern will match,
// too. We can skip checking those.
int math::kmp(const string& pattern, const string& text) {
  // Generate the array of longest prefix that is also suffix.
  auto lps_gen = [&pattern]() {
    // Index in the pattern: for i = 0, we have a substring of size 1, and there
    // is no proper prefix, so we skip i = 0.
    int i = 1;
    int len = 0;                          // Longest prefix.
    vector<int> lps(pattern.size(), 0);   // Initialize to 0.
    while (i < pattern.size()) {
      if (pattern[i] == pattern[len]) {
        len++;
        lps[i++] = len;
      } else {
        if (len != 0) len = lps[len - 1];
        // Consider the pattern: (AABAA)CDEF(AABAA)BGHIJK
        //                                         ^ (current index i)
        // We know that the current suffix S that we have (AABAA) is identical
        // to the prefix of the pattern, but adding 'B' to that suffix doesn't
        // make it a prefix of the pattern, unfortunately.
        // We're still looking for the longest prefix that is also a suffix,
        // and we know for sure if there is one, its length will be at best
        // that of the current suffix S.
        // If S also has a suffix S2 (AA) that is a prefix of S, that saves a
        // few characters to start the search for a new suffix.

        else lps[i++] = 0;
      }
    }
    return lps;
  };

  int i = 0;                 // Index in the text.
  int j = 0;                 // Index in the pattern.
  int matches = 0;           // Number of matches.
  auto lps = lps_gen();
  while (i < text.size()) {
    if (pattern[j] == text[i]) {
      ++j; ++i;
    }
    if (j == pattern.size()) {
      ++matches;
      j = lps[j - 1];  // Match is at index (i - j).
    } else if (i < text.size() && pattern[j] != text[i]) {
      if (j != 0) j = lps[j - 1];
      else ++i;
    }
  }

  return matches;
}


// *****************************************************************************
// ******************************** Arrays *************************************
// *****************************************************************************

int arrays::kadane(const vector<int>& a) {
  int max_ever = 0;
  int max_here = 0;
  for (int i = 0; i < a.size(); ++i) {
    max_here = max(max_here + a[i], 0);
    max_ever = max(max_ever, max_here);
  }
  return max_ever;
}

bool arrays::binsearch(const vector<int>& a, int key) {
  int b = 0;
  int e = a.size() - 1;
  while (b <= e) {
    int mid = b + (e - b) / 2;
    if (a[mid] == key) return true;
    if (a[mid] < key) b = mid + 1;
    else e = mid - 1;
  }
  return false;
}

double arrays::closest_points(const vector<pair<double, double>>& points) {
  // Computes distance between two points.
  auto dist = [](vector<pair<double, double>>::const_iterator it1,
                 vector<pair<double, double>>::const_iterator it2) {
    return hypot(it1->first - it2->first, it1->second - it2->second);
  };

  // Sort by x and y only once in the program.
  auto sorted_x = points;
  auto sorted_y = points;
  sort(sorted_x.begin(), sorted_x.end(),
       [](pair<double, double> p1, pair<double, double> p2) {
         return p1.first < p2.first;
       });
  sort(sorted_y.begin(), sorted_y.end(),
       [](pair<double, double> p1, pair<double, double> p2) {
         return p1.second < p2.second;
       });

  function<double(vector<pair<double, double>>::const_iterator,
                  vector<pair<double, double>>::const_iterator,
                  vector<pair<double, double>>::const_iterator,
                  vector<pair<double, double>>::const_iterator)> local =
      [&local, &dist](vector<pair<double, double>>::const_iterator beg_iter_x,
                      vector<pair<double, double>>::const_iterator end_iter_x,
                      vector<pair<double, double>>::const_iterator beg_iter_y,
                      vector<pair<double, double>>::const_iterator end_iter_y)
          -> double {
    // Base cases.
    int nb_items = distance(beg_iter_x, end_iter_x);
    if (nb_items == 3) {
      return min(dist(beg_iter_x, beg_iter_x + 1),
                 min(dist(beg_iter_x, beg_iter_x + 2),
                     dist(beg_iter_x + 1, beg_iter_x + 2)));
    } else if (nb_items == 2) {
      return dist(beg_iter_x, beg_iter_x + 1);
    } else if (nb_items <= 1) {
      return -1;
    }

    // Split the array.
    int mid = nb_items / 2;
    auto middle_x = beg_iter_x + mid;
    auto middle_y = beg_iter_y + mid;

    // Find closest in left and right. For this we need to create sub y-sorted
    // arrays. We can do the following using the assumption that x values are
    // unique.
    vector<pair<double, double>> sub_y_l(mid);
    vector<pair<double, double>> sub_y_r(distance(middle_x, end_iter_x));
    int il = 0, ir = 0;
    for (auto it = beg_iter_y; it != end_iter_y; ++it) {
      if (it->first < middle_x->first) sub_y_l[il++] = *it;
      else sub_y_r[ir++] = *it;
    }
    double min_dist_l =
        local(beg_iter_x, middle_x, sub_y_l.begin(), sub_y_l.end());
    double min_dist_r =
        local(middle_x, end_iter_x, sub_y_r.begin(), sub_y_r.end());
    double min_dist = min_dist_l < 0 ? min_dist_r
                                     : min_dist_r < 0
                                           ? min_dist_l
                                           : min(min_dist_l, min_dist_r);

    // Study points in the band of width 2 x min_dist around the middle point
    // where the vector was split. Use the vector sorted by y so we don't have
    // to sort the strip. Make sure to also add the middle point to this array.
    vector<pair<double, double>> strip;
    for (auto it = beg_iter_y; it != end_iter_y; ++it) {
      if (fabs(it->first - middle_x->first) < min_dist) {
        strip.push_back(*it);
      }
    }

    // Check if there is a pair in the strip that is smaller.
    if (strip.size() > 1) {
      for (auto it1 = strip.begin(); it1 != strip.end(); ++it1) {
        for (auto it = it1 + 1;
             it != strip.end() && it->second - it1->second < min_dist; ++it) {
          min_dist = min(min_dist, dist(it1, it));
        }
      }
    }

    return min_dist;
  };

  return local(sorted_x.begin(), sorted_x.end(),
               sorted_y.begin(), sorted_y.end());
}

void arrays::fisher_yates(vector<int>& a) {
  std::default_random_engine generator;
  for (int i = a.size() - 1; i > 0; --i) {
    std::uniform_int_distribution<int> distribution(0, i);
    int rand_index = distribution(generator);
    swap(a[rand_index], a[i]);
  }
}


// *****************************************************************************
// ******************************** Graphs *************************************
// *****************************************************************************

vector<graphs::vertex*> graphs::graph::topo_sort(bool* has_cycle) {
  *has_cycle = false;
  set<vertex*> unmarked(vertices.begin(), vertices.end());
  set<vertex*> temporary;
  vector<vertex*> vlist;
  function<bool(vertex*)> visit =
      [&vlist, &unmarked, &temporary, &visit, &has_cycle](vertex* v) {
    if (temporary.find(v) != temporary.end()) {
      *has_cycle = true;
      return false;
    }
    if (unmarked.find(v) != unmarked.end()) {
      temporary.insert(v);
      for (vertex* n : v->neighs) {
        if (!visit(n)) return false;
      }
      temporary.erase(v);
      unmarked.erase(v);
      vlist.push_back(v);
    }
    return true;
  };
  while (!unmarked.empty()) {
    if (!visit(*unmarked.begin())) return vector<vertex*>();
  }
  reverse(vlist.begin(), vlist.end());
  return vlist;
}

bool graphs::graph::two_coloring() {
  map<vertex*, int> color;           // All vertices start with color 0 (null).
  for (auto* v0 : vertices) {
    if (color[v0] == 0) {
      color[v0] = 1;
      queue<vertex*> vsearch;
      vsearch.push(v0);
      while (!vsearch.empty()) {
        vertex* v = vsearch.front();
        vsearch.pop();
        for (vertex* n : v->neighs) {
          if (color[n] == 0) {
            color[n] = color[v] == 1 ? 2 : 1;
            vsearch.push(n);
          } else if (color[n] == color[v]) {
            return false;
          }
        }
      }
    }
  }
  return true;
}

vector<graphs::edge*> graphs::graph::prim() {
  vector<edge*> elist;
  set<vertex*> visited;
  auto cmp = [](edge* e1, edge* e2) { return e1->cost > e2->cost; };
  priority_queue<edge*, vector<edge*>, decltype(cmp)> vqueue(cmp);
  vertex* v0 = vertices[rand() % vertices.size()];   // start with rand vertex
  visited.insert(v0);
  for (auto* n : v0->neighs) { vqueue.push(edgebet(n, v0)); }
  while (!vqueue.empty()) {
    edge* best = vqueue.top();
    vqueue.pop();
    auto* v1 = best->v1;
    auto* v2 = best->v2;
    if (visited.find(v1) == visited.end() ||
        visited.find(v2) == visited.end()) {
      elist.push_back(best);
      if (visited.find(v1) == visited.end()) {
        visited.insert(v1);
        for (auto* n : v1->neighs) {
          vqueue.push(edgebet(n, v1));
        }
      } else {
        visited.insert(v2);
        for (auto* n : v2->neighs) {
          vqueue.push(edgebet(n, v2));
        }
      }
    }
  }
  return elist;
}

vector<int> graphs::graph::dfs(vertex* start) {
  vector<int> vlist;
  stack<vertex*> vsearch;
  set<vertex*> visited;
  visited.insert(start);
  vsearch.push(start);
  while (!vsearch.empty()) {
    vertex* v = vsearch.top();
    vsearch.pop();
    vlist.push_back(v->value);
    for (vertex* n : v->neighs) {
      if (visited.find(n) == visited.end()) {
        visited.insert(n);
        vsearch.push(n);
      }
    }
  }
  return vlist;
}

vector<int> graphs::graph::bfs(vertex* start) {
  vector<int> vlist;
  queue<vertex*> vsearch;
  set<vertex*> visited;
  vsearch.push(start);
  while (!vsearch.empty()) {
    vertex* v = vsearch.front();
    vsearch.pop();
    vlist.push_back(v->value);
    for (vertex* n : v->neighs) {
      if (visited.find(n) == visited.end()) {
        vsearch.push(n);
        visited.insert(n);
      }
    }
  }
  return vlist;
}

vector<vector<int>> graphs::graph::floyd_warshall() {
  vector<vector<int>> costs(
      vertices.size(),
      vector<int>(vertices.size(), numeric_limits<int>::max()));
  for (int i = 0; i < vertices.size(); ++i) {
    costs[i][i] = 0;
    for (int j = 0; j < vertices.size(); ++j) {
      if (i != j) {
        if (edgeat[i][j] != nullptr) costs[i][j] = edgeat[i][j]->cost;
      }
    }
  }
  for (int i = 0; i < vertices.size(); ++i) {
    for (int j = 0; j < vertices.size(); ++j) {
      for (int k = 0; k < vertices.size(); ++k) {
        costs[j][k] = min<long long>(costs[j][k], costs[j][i] + costs[i][k]);
      }
    }
  }
  return costs;
}

// Returns the components by value, the articulation points by reference.
vector<vector<graphs::vertex*>>
graphs::graph::biconnected_components(vertex* start, set<int>& apoints) const {
  vector<vector<vertex*>> groups;
  map<vertex*, int> num, low;
  map<vertex*, vertex*> parent;
  stack<vertex*> s;                  // stack is used to build groups
  int d = 1, children = 0;           // children is used to classify 'start'

  function<void(vertex*)> dfs = [&](vertex* v) {
    low[v] = num[v] = d++;
    s.push(v);
    for (auto* n : v->neighs) {
      if (num[n] == 0) {
        parent[n] = v;
        dfs(n);
        if (parent[v] == nullptr) children++;
        if (low[n] >= num[v]) {
          apoints.insert(v->value);
          vector<vertex*> g({v});
          while (g.push_back(s.top()), s.pop(), g.back() != n);
          groups.push_back(move(g));
        }
        low[v] = min(low[v], low[n]);
      } else if (n != parent[v]) {
        low[v] = min(low[v], num[n]);
      }
    }
  };

  parent[start] = nullptr;
  dfs(start);
  if (children > 1) apoints.insert(start->value);
  else apoints.erase(start->value);
  return groups;
}
